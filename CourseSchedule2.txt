class Solution {
   public int[] findOrder(int numCourses, int[][] prerequisites) {
        Stack<Integer> st=new Stack<>();
        ArrayList<ArrayList<Integer>> graph=new ArrayList<>();
        int v = numCourses;
        
        for(int i=0;i<v;i++){
            graph.add(new ArrayList<>());
        }
        
        for(int i=0;i<prerequisites.length;i++){
            int a = prerequisites[i][0];
             int b = prerequisites[i][1];
            
            graph.get(b).add(a);
        }
        
        boolean[] vis=new boolean[v];
      ArrayDeque<Integer> q=new ArrayDeque<>();
        int indegree[]=new int[v];
        for(int i=0;i<v;i++){
            for(int nbrs:graph.get(i)){
                indegree[nbrs]++;
            }
        }
        
        for(int i=0;i<v;i++){
            if(indegree[i]==0){
                q.addLast(i);
            }
        } 
           
            int ans[]=new int[numCourses];
        int idx=0;
            while(q.size()>0){
                int rem = q.removeFirst();
               ans[idx]=rem;
                idx++;
                for(int nbrs:graph.get(rem)){
                    indegree[nbrs]--;
                    if(indegree[nbrs]==0){
                        q.addLast(nbrs);
                    }
                }
                  
            }
               
      ****   return  idx == numCourses ? ans  : new int[0];
        
        }
        
    
}
